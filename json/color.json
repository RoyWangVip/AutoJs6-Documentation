{
  "source": "..\\api\\color.md",
  "modules": [
    {
      "textRaw": "颜色 (Color)",
      "name": "颜色_(color)",
      "desc": "<p>colors 模块可用于 [ 颜色模式转换 / 色彩空间转换 / 颜色分量合成及分解 ] 等.<br>同时包含一些颜色相关的工具, 如 [ 计算亮度值 / 相似度比较 ] 等.  </p>\n<p>colors 模块与 <a href=\"image\">images</a> 模块配合使用, 可完成更多图色方面的功能.</p>\n<hr>\n",
      "modules": [
        {
          "textRaw": "颜色表示",
          "name": "颜色表示",
          "desc": "<p>AutoJs6 支持以下方式表示一个颜色:</p>\n<ul>\n<li><a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a><ul>\n<li>字面量<ul>\n<li><code>#RGB</code> (如 <code>#F00</code> 表示红色, 相当于 <code>#FF0000</code>)</li>\n<li><code>#RRGGBB</code> (如 <code>#FF0000</code> 表示红色)</li>\n<li><code>#AARRGGBB</code> (如 <code>#80FF0000</code> 表示半透明红色)</li>\n</ul>\n</li>\n<li>方法<ul>\n<li><a href=\"#m-tohex\">colors.toHex</a> (如 <code>colors.toHex(0xFF0000)</code> 表示红色对应的颜色字符串, 结果为 <code>#FF0000</code>)</li>\n<li><a href=\"#m-tofullhex\">colors.toFullHex</a> (如 <code>colors.toFullHex(0xFF0000)</code> 表示红色对应的完全颜色字符串, 结果为 <code>#FFFF0000</code>)</li>\n<li>... ...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a><ul>\n<li>字面量<ul>\n<li><code>0xAARRGGBB</code> (如 <code>0x8000FF00</code> 在 <code>Java</code> 的 <code>Integer</code> 范围对应值表示半透明绿色)</li>\n</ul>\n</li>\n<li>方法<ul>\n<li><a href=\"#m-rgb\">colors.rgb</a> (如 <code>colors.rgb(255, 0, 0)</code> 表示红色)</li>\n<li><a href=\"#m-argb\">colors.argb</a> (如 <code>colors.argb(128, 255, 0, 0)</code> 表示半透明红色)</li>\n<li><a href=\"#m-rgba\">colors.rgba</a> (如 <code>colors.rgba(255, 0, 0, 128)</code> 表示半透明红色)</li>\n<li><a href=\"#m-hsv\">colors.hsv</a> (如 <code>colors.hsv(0, 1, 1)</code> 表示红色)</li>\n<li><a href=\"#m-hsva\">colors.hsva</a> (如 <code>colors.rgba(0, 1, 1, 0.5)</code> 表示半透明红色)</li>\n<li><a href=\"#m-hsl\">colors.hsl</a> (如 <code>colors.hsl(0, 1, 0.5)</code> 表示红色)</li>\n<li><a href=\"#m-hsla\">colors.hsla</a> (如 <code>colors.hsl(0, 1, 0.5, 0.5)</code> 表示半透明红色)</li>\n<li><a href=\"#m-toint\">colors.toInt</a> (如 <code>colors.toInt(&#39;#FF0000&#39;)</code> 表示红色对应的颜色整数, 结果为 <code>-65536</code>)</li>\n<li>... ...</li>\n</ul>\n</li>\n<li>常量<ul>\n<li><a href=\"#p-android\">colors.android.RED</a> (<a href=\"colorTable#Android-颜色列表\">Android 颜色列表</a> 的红色颜色整数)</li>\n<li><a href=\"#p-android\">colors.android.BLACK</a> (<a href=\"colorTable#Android-颜色列表\">Android 颜色列表</a> 的黑色颜色整数)</li>\n<li>... ...</li>\n<li><a href=\"#p-css\">colors.css.RED</a> (<a href=\"colorTable#CSS-颜色列表\">Css 颜色列表</a> 的红色颜色整数)</li>\n<li><a href=\"#p-css\">colors.css.BLACK</a> (<a href=\"colorTable#CSS-颜色列表\">Css 颜色列表</a> 的黑色颜色整数)</li>\n<li>... ...</li>\n<li><a href=\"#p-web\">colors.web.RED</a> (<a href=\"colorTable#WEB-颜色列表\">Web 颜色列表</a> 的红色颜色整数)</li>\n<li><a href=\"#p-web\">colors.web.BLACK</a> (<a href=\"colorTable#WEB-颜色列表\">Web 颜色列表</a> 的黑色颜色整数)</li>\n<li>... ...</li>\n<li><a href=\"#p-material\">colors.material.ORANGE</a> (<a href=\"colorTable#Material-颜色列表\">Material 颜色列表</a> 的橙色颜色整数)</li>\n<li><a href=\"#p-material\">colors.material.ORANGE_300</a> (<a href=\"colorTable#Material-颜色列表\">Material 颜色列表</a> 的 300 色号橙色颜色整数)</li>\n<li>... ...</li>\n<li><a href=\"#p-red\">colors.RED</a> (<a href=\"colorTable#融合颜色列表\">融合颜色列表</a> 的红色颜色整数)</li>\n<li><a href=\"#p-black\">colors.BLACK</a> (<a href=\"colorTable#融合颜色列表\">融合颜色列表</a> 的黑色颜色整数)</li>\n<li><a href=\"#p-orange\">colors.ORANGE</a> (<a href=\"colorTable#融合颜色列表\">融合颜色列表</a> 的橙色颜色整数)</li>\n<li>... ...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"dataTypes.md#colorcomponents\">颜色分量数组 (ColorComponents)</a><ul>\n<li>方法<ul>\n<li><a href=\"#m-torgb\">colors.toRgb</a> (颜色分量数组 <code>[R,G,B]</code>)</li>\n<li><a href=\"#m-torgba\">colors.toRgba</a> (颜色分量数组 <code>[R,G,B,A]</code>)</li>\n<li><a href=\"#m-toargb\">colors.toArgb</a> (颜色分量数组 <code>[A,R,G,B]</code>)</li>\n<li><a href=\"#m-tohsv\">colors.toHsv</a> (颜色分量数组 <code>[H,S,V]</code>)</li>\n<li><a href=\"#m-tohsva\">colors.toHsva</a> (颜色分量数组 <code>[H,S,V,A]</code>)</li>\n<li><a href=\"#m-tohsl\">colors.toHsl</a> (颜色分量数组 <code>[H,S,L]</code>)</li>\n<li><a href=\"#m-tohsla\">colors.toHsla</a> (颜色分量数组 <code>[H,S,L,A]</code>)</li>\n<li>... ...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"dataTypes#colorname\">颜色名称 (ColorName)</a><ul>\n<li>常量<ul>\n<li>&quot;red&quot; (红色)</li>\n<li>&quot;black&quot; (黑色)</li>\n<li>&quot;orange&quot; (橙色)</li>\n<li>... ...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p style=\"font: bold 2em sans-serif; color: #FF7043\">colors</p>\n\n<hr>\n",
          "type": "module",
          "displayName": "颜色表示"
        },
        {
          "textRaw": "[m] toInt",
          "name": "[m]_toint",
          "methods": [
            {
              "textRaw": "toInt(color)",
              "type": "method",
              "name": "toInt",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [ColorInt](dataTypes#colorint) } - 颜色整数 ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [ColorInt](dataTypes#colorint) ",
                      "desc": "颜色整数"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>将颜色参数转换为 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">/* ColorHex - 颜色代码. */\ncolors.toInt(&#39;#CC5500&#39;); // -3386112\ncolors.toInt(&#39;#C50&#39;); // -3386112\ncolors.toInt(&#39;#FFCC5500&#39;); // -3386112\n\n/* ColorInt - 颜色整数. */\ncolors.toInt(0xFFCC5500); // -3386112\ncolors.toInt(colors.web.BURNT_ORANGE); // -3386112\n\n/* ColorName - 颜色名称. */\ncolors.toInt(&#39;BURNT_ORANGE&#39;); // -3386112\ncolors.toInt(&#39;burnt-orange&#39;); // -3386112\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] toInt"
        },
        {
          "textRaw": "[m] toHex",
          "name": "[m]_tohex",
          "methods": [
            {
              "textRaw": "toHex(color)",
              "type": "method",
              "name": "toHex",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>.</p>\n<pre><code class=\"lang-js\">/* ColorHex - 颜色代码. */\ncolors.toHex(&#39;#CC5500&#39;); // #CC5500\ncolors.toHex(&#39;#C50&#39;); // #CC5500\ncolors.toHex(&#39;#DECC5500&#39;); // #DECC5500\ncolors.toHex(&#39;#FFCC5500&#39;); /* #CC5500, A (alpha) 分量被省略. */\n\n/* ColorInt - 颜色整数. */\ncolors.toHex(0xFFCC5500); // #CC5500\ncolors.toHex(colors.web.BURNT_ORANGE); // #CC5500\n\n/* ColorName - 颜色名称. */\ncolors.toHex(&#39;BURNT_ORANGE&#39;); // #CC5500\ncolors.toHex(&#39;burnt-orange&#39;); // #CC5500\n</code></pre>\n<p>当 <code>A (alpha)</code> 分量为 <code>100% (255/255;100/100)</code> 时, <code>FF</code> 会自动省略,<br>如 <code>#FFC0C0C0</code> 将自动转换为 <code>#C0C0C0</code>, 此方法相当于 <code>toHex(color, &#39;auto&#39;)</code>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHex(color, alpha)",
              "type": "method",
              "name": "toHex",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>[alpha = &#39;auto&#39;]</strong> { <a href=\"dataTypes#boolean\">boolean</a> | <code>&#39;keep&#39;</code> | <code>&#39;none&#39;</code> | <code>&#39;auto&#39;</code> } - A (alpha) 分量参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>, 并根据 <code>alpha</code> 参数决定颜色代码 <code>A (alpha)</code> 分量的显示状态.</p>\n<p><code>A (alpha)</code> 分量参数取值表:</p>\n<table>\n<thead>\n<tr>\n<th>取值</th>\n<th>含义</th>\n<th style=\"text-align:center\">默认</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#39;keep&#39; / true</td>\n<td>强制显示 A 分量, 不论 A 分量是否为 0xFF</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>&#39;none&#39; / false</td>\n<td>强制去除 A 分量, 只保留 R / G / B 分量</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>&#39;auto&#39;</td>\n<td>根据 A 分量是否为 0xFF 自动决定显示状态</td>\n<td style=\"text-align:center\">√</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-js\">let cA = &#39;#AAC0C0C0&#39;;\nlet cB = &#39;#FFC0C0C0&#39;;\nlet cC = &#39;#C0C0C0&#39;;\n\ncolors.toHex(cA, &#39;auto&#39;); /* #AAC0C0C0, &#39;auto&#39; 参数可省略. */\ncolors.toHex(cB, &#39;auto&#39;); /* #C0C0C0, &#39;auto&#39; 参数可省略. */\ncolors.toHex(cC, &#39;auto&#39;); /* #C0C0C0, &#39;auto&#39; 参数可省略. */\n\n/* cA 舍弃 A 分量. */\ncolors.toHex(cA, false); // #C0C0C0\ncolors.toHex(cA, &#39;none&#39;); /* 同上. */\n\n/* cB 保留 A 分量. */\ncolors.toHex(cB, true); // #FFC0C0C0\ncolors.toHex(cB, &#39;keep&#39;); /* 同上. */\n\n/* cC 强制显示 A 分量. */\ncolors.toHex(cC, true); // #FFC0C0C0\ncolors.toHex(cC, &#39;keep&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHex(color, length)",
              "type": "method",
              "name": "toHex",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 3/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>length</strong> { <code>8</code> | <code>6</code> | <code>3</code> } - Hex 代码长度参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>, 并根据 <code>length</code> 参数决定颜色代码的显示状态.</p>\n<p>Hex 代码长度参数取值表:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">取值</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">8</td>\n<td>强制显示 A 分量, 结果格式为 #AARRGGBB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">6</td>\n<td>强制去除 A 分量, 结果格式为 #RRGGBB</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">3</td>\n<td>强制去除 A 分量, 结果格式为 #RGB</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-js\">let cA = &#39;#AA9966CC&#39;;\nlet cB = &#39;#FF9966CC&#39;;\nlet cC = &#39;#9966CC&#39;;\nlet cD = &#39;#FAEBD7&#39;;\n\n/* 转换为 8 长度颜色代码, 强制保留 A 分量. */\ncolors.toHex(cA, 8); // #AA9966CC\ncolors.toHex(cB, 8); // #FF9966CC\ncolors.toHex(cC, 8); // #FF9966CC\ncolors.toHex(cD, 8); // #FFFAEBD7\n\n/* 转换为 6 长度颜色代码, 强制去除 A 分量. */\ncolors.toHex(cA, 6); // #9966CC\ncolors.toHex(cB, 6); // #9966CC\ncolors.toHex(cC, 6); // #9966CC\ncolors.toHex(cD, 6); // #FAEBD7\n\n/* 转换为 3 长度颜色代码, 强制去除 A 分量. */\ncolors.toHex(cA, 3); // #96C\ncolors.toHex(cB, 3); // #96C\ncolors.toHex(cC, 3); // #96C\ncolors.toHex(cD, 3); /* 抛出异常. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    },
                    {
                      "name": "length"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toHex"
        },
        {
          "textRaw": "[m] toFullHex",
          "name": "[m]_tofullhex",
          "methods": [
            {
              "textRaw": "toFullHex(color)",
              "type": "method",
              "name": "toFullHex",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [ColorHex](dataTypes#colorhex) } - 颜色代码的完整形式 ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [ColorHex](dataTypes#colorhex) ",
                      "desc": "颜色代码的完整形式"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>将颜色参数强制转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a> 的完整形式 (#AARRGGBB).</p>\n<p>此方法为 <a href=\"#tohexcolor-length\">colors.toHex(color, 8)</a> 的别名方法.</p>\n<pre><code class=\"lang-js\">colors.toHex(&#39;#CC5500&#39;); // #CC5500\ncolors.toFullHex(&#39;#CC5500&#39;); // #FFCC5500\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] toFullHex"
        },
        {
          "textRaw": "[m] parseColor",
          "name": "[m]_parsecolor",
          "methods": [
            {
              "textRaw": "parseColor(color)",
              "type": "method",
              "name": "parseColor",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [string](dataTypes#string) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [string](dataTypes#string) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [number](dataTypes#number) } - 颜色整数 ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [number](dataTypes#number) ",
                      "desc": "颜色整数"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>将颜色参数转换为 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<p>类似 <a href=\"#m-toint\">toInt</a>, 但参数接受范围相对狭小且类型及数值要求更加严格.<br>parseColor 的颜色参数仅支持六位数及八位数颜色代码及部分颜色名称.</p>\n<p>支持的颜色名称 (不区分大小写):</p>\n<blockquote>\n<p>&#39;aqua&#39;, &#39;black&#39;, &#39;blue&#39;, &#39;cyan&#39;, &#39;darkgray&#39;, &#39;darkgrey&#39;,</p>\n<p>&#39;fuchsia&#39;, &#39;gray&#39;, &#39;green&#39;, &#39;grey&#39;, &#39;lightgray&#39;,</p>\n<p>&#39;lightgrey&#39;, &#39;lime&#39;, &#39;magenta&#39;, &#39;maroon&#39;, &#39;navy&#39;, &#39;olive&#39;,</p>\n<p>&#39;purple&#39;, &#39;red&#39;, &#39;silver&#39;, &#39;teal&#39;, &#39;white&#39;, &#39;yellow&#39;`.</p>\n</blockquote>\n<p>下表列出部分 toInt 与 parseColor 传参后的结果对照:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>toInt</th>\n<th>parseColor</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&#39;blue&#39;</td>\n<td>-16776961</td>\n<td>-16776961</td>\n</tr>\n<tr>\n<td>&#39;burnt-orange&#39;</td>\n<td>-3386112</td>\n<td># 抛出异常 #</td>\n</tr>\n<tr>\n<td>&#39;#FFCC5500&#39;</td>\n<td>-3386112</td>\n<td>-3386112</td>\n</tr>\n<tr>\n<td>&#39;#CC5500&#39;</td>\n<td>-3386112</td>\n<td>-3386112</td>\n</tr>\n<tr>\n<td>&#39;#C50&#39;</td>\n<td>-3386112</td>\n<td># 抛出异常 #</td>\n</tr>\n<tr>\n<td>0xFFCC5500</td>\n<td>-3386112</td>\n<td># 抛出异常 #</td>\n</tr>\n<tr>\n<td>colors.web.BURNT_ORANGE</td>\n<td>-3386112</td>\n<td># 抛出异常 #</td>\n</tr>\n</tbody>\n</table>\n<p>除非需要考虑多版本兼容, 否则建议始终使用 toInt 替代 parseColor.</p>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] parseColor"
        },
        {
          "textRaw": "[m] toString",
          "name": "[m]_tostring",
          "methods": [
            {
              "textRaw": "toString(color)",
              "type": "method",
              "name": "toString",
              "desc": "<p><strong><code>[6.2.0]</code></strong> <strong><code>Overload 1/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>.</p>\n<p><a href=\"#tohexcolor\">toHex(color)</a> 的别名方法.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toString(color, alpha)",
              "type": "method",
              "name": "toString",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>[alpha = &#39;auto&#39;]</strong> { <a href=\"dataTypes#boolean\">boolean</a> | <code>&#39;keep&#39;</code> | <code>&#39;none&#39;</code> | <code>&#39;auto&#39;</code> } - A (alpha) 分量参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>, 并根据 <code>alpha</code> 参数决定颜色代码 <code>A (alpha)</code> 分量的显示状态.</p>\n<p><a href=\"#tohexcolor-alpha\">toHex(color, alpha)</a> 的别名方法.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toString(color, length)",
              "type": "method",
              "name": "toString",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 3/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>length</strong> { <code>8</code> | <code>6</code> | <code>3</code> } - Hex 代码长度参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorhex\">ColorHex</a> } - 颜色代码</li>\n</ul>\n<p>将颜色参数转换为 <a href=\"dataTypes#colorhex\">颜色代码 (ColorHex)</a>, 并根据 <code>length</code> 参数决定颜色代码的显示状态.</p>\n<p><a href=\"#tohexcolor-length\">toHex(color, length)</a> 的别名方法.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    },
                    {
                      "name": "length"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toString"
        },
        {
          "textRaw": "[m] alpha",
          "name": "[m]_alpha",
          "methods": [
            {
              "textRaw": "alpha(color)",
              "type": "method",
              "name": "alpha",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [IntRange[0..255]](dataTypes#intrange) } ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [IntRange[0..255]](dataTypes#intrange) "
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <code>A (alpha)</code> 分量, 取值范围 <code>[0..255]</code>.</p>\n<pre><code class=\"lang-js\">colors.alpha(&#39;#663399&#39;); // 255\ncolors.alpha(colors.TRANSPARENT); // 0\ncolors.alpha(&#39;#05060708&#39;); // 5\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] alpha"
        },
        {
          "textRaw": "[m] alphaDouble",
          "name": "[m]_alphadouble",
          "methods": [
            {
              "textRaw": "alphaDouble(color)",
              "type": "method",
              "name": "alphaDouble",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [Range[0..1]](dataTypes#range) } ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [Range[0..1]](dataTypes#range) "
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <code>A (alpha)</code> 分量, 取值范围 <code>[0..1]</code>.</p>\n<pre><code class=\"lang-js\">colors.alphaDouble(&#39;#663399&#39;); // 1\ncolors.alphaDouble(colors.TRANSPARENT); // 0\ncolors.alphaDouble(&#39;#05060708&#39;); // 0.0196078431372549\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] alphaDouble"
        },
        {
          "textRaw": "[m] red",
          "name": "[m]_red",
          "methods": [
            {
              "textRaw": "red(color)",
              "type": "method",
              "name": "red",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [IntRange[0..255]](dataTypes#intrange) } ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [IntRange[0..255]](dataTypes#intrange) "
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <code>R (red)</code> 分量, 取值范围 <code>[0..255]</code>.</p>\n<pre><code class=\"lang-js\">colors.red(&#39;#663399&#39;); // 102\ncolors.red(colors.TRANSPARENT); // 0\ncolors.red(&#39;#05060708&#39;); // 6\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] red"
        },
        {
          "textRaw": "[m] green",
          "name": "[m]_green",
          "methods": [
            {
              "textRaw": "green(color)",
              "type": "method",
              "name": "green",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [IntRange[0..255]](dataTypes#intrange) } ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [IntRange[0..255]](dataTypes#intrange) "
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <code>G (green)</code> 分量, 取值范围 <code>[0..255]</code>.</p>\n<pre><code class=\"lang-js\">colors.green(&#39;#663399&#39;); // 51\ncolors.green(colors.TRANSPARENT); // 0\ncolors.green(&#39;#05060708&#39;); // 7\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] green"
        },
        {
          "textRaw": "[m] blue",
          "name": "[m]_blue",
          "methods": [
            {
              "textRaw": "blue(color)",
              "type": "method",
              "name": "blue",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [IntRange[0..255]](dataTypes#intrange) } ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [IntRange[0..255]](dataTypes#intrange) "
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <code>B (blue)</code> 分量, 取值范围 <code>[0..255]</code>.</p>\n<pre><code class=\"lang-js\">colors.blue(&#39;#663399&#39;); // 153\ncolors.blue(colors.TRANSPARENT); // 0\ncolors.blue(&#39;#05060708&#39;); // 8\n</code></pre>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] blue"
        },
        {
          "textRaw": "[m] rgb",
          "name": "[m]_rgb",
          "methods": [
            {
              "textRaw": "rgb(color)",
              "type": "method",
              "name": "rgb",
              "desc": "<p><strong><code>[6.2.0]</code></strong> <strong><code>Overload 1/3</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>获取 <code>color</code> 参数对应的 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<p><code>color</code> 参数为颜色代码时, 支持情况如下:</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#RRGGBB</td>\n<td>正常</td>\n</tr>\n<tr>\n<td>#RGB</td>\n<td>正常</td>\n</tr>\n<tr>\n<td>#AARRGGBB</td>\n<td>A (alpha) 分量被忽略</td>\n</tr>\n</tbody>\n</table>\n<p>方法调用结果的 <code>A (alpha)</code> 分量恒为 <code>255</code>, 意味着 <code>color</code> 参数中的 <code>A</code> 分量信息将被忽略.</p>\n<pre><code class=\"lang-js\">colors.rgb(&#39;#663399&#39;);\ncolors.rgb(&#39;#DE663399&#39;); /* 同上, A 分量被忽略. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rgb(red, green, blue)",
              "type": "method",
              "name": "rgb",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/3</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.rgb(255, 128, 9);\ncolors.rgb(0xFF, 0x80, 0x09); /* 同上. */\ncolors.rgb(&#39;#FF8009&#39;); /* 同上. */\ncolors.rgb(1, 0.5, &#39;3.53%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rgb(components)",
              "type": "method",
              "name": "rgb",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 3/3</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.rgb([ 255, 128, 9 ]);\ncolors.rgb([ 0xFF, 0x80, 0x09 ]); /* 同上. */\ncolors.rgb([ 1, 0.5, &#39;3.53%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] rgb"
        },
        {
          "textRaw": "[m] argb",
          "name": "[m]_argb",
          "methods": [
            {
              "textRaw": "argb(colorHex)",
              "type": "method",
              "name": "argb",
              "desc": "<p><strong><code>[6.2.0]</code></strong> <strong><code>Overload 1/3</code></strong></p>\n<ul>\n<li><strong>colorHex</strong> { <a href=\"dataTypes#string\">string</a> } - 颜色代码</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>获取 <code>colorHex</code> 颜色代码对应的 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#RRGGBB</td>\n<td>A (alpha) 分量为 0xFF</td>\n</tr>\n<tr>\n<td>#RGB</td>\n<td>A (alpha) 分量为 0xFF</td>\n</tr>\n<tr>\n<td>#AARRGGBB</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-js\">colors.argb(&#39;#663399&#39;); /* 相当于 argb(&#39;#FF663399&#39;) . */\ncolors.argb(&#39;#DE663399&#39;); /* 结果不同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorHex"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "argb(alpha, red, green, blue)",
              "type": "method",
              "name": "argb",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/3</code></strong></p>\n<ul>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.argb(64, 255, 128, 9);\ncolors.argb(0x40, 0xFF, 0x80, 0x09); /* 同上. */\ncolors.argb(&#39;#40FF8009&#39;); /* 同上. */\ncolors.argb(0.25, 1, 0.5, &#39;3.53%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "alpha"
                    },
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "argb(components)",
              "type": "method",
              "name": "argb",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 3/3</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.argb([ 64, 255, 128, 9 ]);\ncolors.argb([ 0x40, 0xFF, 0x80, 0x09 ]); /* 同上. */\ncolors.argb([ 0.25, 1, 0.5, &#39;3.53%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] argb"
        },
        {
          "textRaw": "[m] rgba",
          "name": "[m]_rgba",
          "methods": [
            {
              "textRaw": "rgba(colorHex)",
              "type": "method",
              "name": "rgba",
              "desc": "<p><strong><code>[6.2.0]</code></strong> <strong><code>Overload 1/3</code></strong></p>\n<ul>\n<li><strong>colorHex</strong> { <a href=\"dataTypes#string\">string</a> } - 颜色代码</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>获取 <code>colorHex</code> 颜色代码对应的 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<table>\n<thead>\n<tr>\n<th>格式</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#RRGGBB</td>\n<td>A (alpha) 分量为 0xFF</td>\n</tr>\n<tr>\n<td>#RGB</td>\n<td>A (alpha) 分量为 0xFF</td>\n</tr>\n<tr>\n<td>#RRGGBBAA</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<pre><code class=\"lang-js\">colors.rgba(&#39;#663399&#39;); /* 相当于 rgba(&#39;#663399FF&#39;) . */\ncolors.rgba(&#39;#663399FF&#39;); /* 结果同上. */\ncolors.rgba(&#39;#FF663399&#39;); /* 结果不同上. */\n</code></pre>\n<p>注意区分 <code>colors.rgba</code> 与 <code>colors.argb</code>:</p>\n<pre><code class=\"lang-js\">colors.rgba(&#39;#11335577&#39;); /* A (alpha) 分量为 0x77 . */\ncolors.argb(&#39;#11335577&#39;); /* A (alpha) 分量为 0x11 . */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorHex"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rgba(red, green, blue, alpha)",
              "type": "method",
              "name": "rgba",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/3</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.rgba(255, 128, 9, 64);\ncolors.rgba(0xFF, 0x80, 0x09, 0x40); /* 同上. */\ncolors.rgba(&#39;#FF800940&#39;); /* 同上. */\ncolors.rgba(1, 0.5, &#39;3.53%&#39;, 0.25); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "rgba(components)",
              "type": "method",
              "name": "rgba",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 3/3</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.rgba([ 255, 128, 9, 64 ]);\ncolors.rgba([ 0xFF, 0x80, 0x09, 0x40 ]); /* 同上. */\ncolors.rgba([ 1, 0.5, &#39;3.53%&#39;, 0.25 ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] rgba"
        },
        {
          "textRaw": "[m] hsv",
          "name": "[m]_hsv",
          "methods": [
            {
              "textRaw": "hsv(hue, saturation, value)",
              "type": "method",
              "name": "hsv",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>hue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - H (hue)</li>\n<li><strong>saturation</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - S (saturation)</li>\n<li><strong>value</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - V (value)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsv(90, 80, 64);\ncolors.hsv(90, 0.8, 0.64); /* 同上. */\ncolors.hsv(0.25, 0.8, 0.64); /* 同上. */\ncolors.hsv(&#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "hue"
                    },
                    {
                      "name": "saturation"
                    },
                    {
                      "name": "value"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hsv(components)",
              "type": "method",
              "name": "hsv",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsv([ 90, 80, 64 ]);\ncolors.hsv([ 90, 0.8, 0.64 ]); /* 同上. */\ncolors.hsv([ 0.25, 0.8, 0.64 ]); /* 同上. */\ncolors.hsv([ &#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] hsv"
        },
        {
          "textRaw": "[m] hsva",
          "name": "[m]_hsva",
          "methods": [
            {
              "textRaw": "hsva(hue, saturation, value, alpha)",
              "type": "method",
              "name": "hsva",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>hue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - H (hue)</li>\n<li><strong>saturation</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - S (saturation)</li>\n<li><strong>value</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - V (value)</li>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsva(90, 80, 64, 64);\ncolors.hsva(90, 0.8, 0.64, 0.25); /* 同上. */\ncolors.hsva(0.25, 0.8, 0.64, 0.25); /* 同上. */\ncolors.hsva(&#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;, &#39;25%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "hue"
                    },
                    {
                      "name": "saturation"
                    },
                    {
                      "name": "value"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hsva(components)",
              "type": "method",
              "name": "hsva",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsva([ 90, 80, 64, 64 ]);\ncolors.hsva([ 90, 0.8, 0.64, 0.25 ]); /* 同上. */\ncolors.hsva([ 0.25, 0.8, 0.64, 0.25 ]); /* 同上. */\ncolors.hsva([ &#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;, &#39;25%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] hsva"
        },
        {
          "textRaw": "[m] hsl",
          "name": "[m]_hsl",
          "methods": [
            {
              "textRaw": "hsl(hue, saturation, lightness)",
              "type": "method",
              "name": "hsl",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>hue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - H (hue)</li>\n<li><strong>saturation</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - S (saturation)</li>\n<li><strong>lightness</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - L (lightness)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsl(90, 80, 64);\ncolors.hsl(90, 0.8, 0.64); /* 同上. */\ncolors.hsl(0.25, 0.8, 0.64); /* 同上. */\ncolors.hsl(&#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "hue"
                    },
                    {
                      "name": "saturation"
                    },
                    {
                      "name": "lightness"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hsl(components)",
              "type": "method",
              "name": "hsl",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsl([ 90, 80, 64 ]);\ncolors.hsl([ 90, 0.8, 0.64 ]); /* 同上. */\ncolors.hsl([ 0.25, 0.8, 0.64 ]); /* 同上. */\ncolors.hsl([ &#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] hsl"
        },
        {
          "textRaw": "[m] hsla",
          "name": "[m]_hsla",
          "methods": [
            {
              "textRaw": "hsla(hue, saturation, lightness, alpha)",
              "type": "method",
              "name": "hsla",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>hue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - H (hue)</li>\n<li><strong>saturation</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - S (saturation)</li>\n<li><strong>lightness</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - L (lightness)</li>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponent\">颜色分量</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsla(90, 80, 64, 64);\ncolors.hsla(90, 0.8, 0.64, 0.25); /* 同上. */\ncolors.hsla(0.25, 0.8, 0.64, 0.25); /* 同上. */\ncolors.hsla(&#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;, &#39;25%&#39;); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "hue"
                    },
                    {
                      "name": "saturation"
                    },
                    {
                      "name": "lightness"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "hsla(components)",
              "type": "method",
              "name": "hsla",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>components</strong> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a><a href=\"dataTypes#array\">[]</a> } - 颜色分量数组</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorint\">ColorInt</a> }</li>\n</ul>\n<p>通过 <a href=\"dataTypes#colorcomponents\">颜色分量数组</a> 获取 <a href=\"dataTypes#colorint\">颜色整数 (ColorInt)</a>.</p>\n<pre><code class=\"lang-js\">colors.hsla([ 90, 80, 64, 64 ]);\ncolors.hsla([ 90, 0.8, 0.64, 0.25 ]); /* 同上. */\ncolors.hsla([ 0.25, 0.8, 0.64, 0.25 ]); /* 同上. */\ncolors.hsla([ &#39;25%&#39;, &#39;80%&#39;, &#39;64%&#39;, &#39;25%&#39; ]); /* 同上. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "components"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] hsla"
        },
        {
          "textRaw": "[m] toRgb",
          "name": "[m]_torgb",
          "methods": [
            {
              "textRaw": "toRgb(color)",
              "type": "method",
              "name": "toRgb",
              "desc": "<p><strong><code>6.2.0</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 RGB <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ r, g, b ] = colors.toRgb(&#39;#663399&#39;);\nconsole.log(`R: ${r}, G: ${g}, B: ${b}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toRgb"
        },
        {
          "textRaw": "[m] toRgba",
          "name": "[m]_torgba",
          "methods": [
            {
              "textRaw": "toRgba(color)",
              "type": "method",
              "name": "toRgba",
              "desc": "<p><strong><code>6.2.0</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 RGBA <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ r, g, b, a ] = colors.toRgba(&#39;#DE663399&#39;);\nconsole.log(`R: ${r}, G: ${g}, B: ${b}, A: ${a}`);\n</code></pre>\n<p>需留意上述示例的参数格式为 <code>#AARRGGBB</code>, 结果格式为 <code>[RR, GG, BB, AA]</code>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toRgba"
        },
        {
          "textRaw": "[m] toArgb",
          "name": "[m]_toargb",
          "methods": [
            {
              "textRaw": "toArgb(color)",
              "type": "method",
              "name": "toArgb",
              "desc": "<p><strong><code>6.2.0</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 ARGB <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ a, r, g, b ] = colors.toArgb(&#39;#DE663399&#39;);\nconsole.log(`A: ${a}, R: ${r}, G: ${g}, B: ${b}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toArgb"
        },
        {
          "textRaw": "[m] toHsv",
          "name": "[m]_tohsv",
          "methods": [
            {
              "textRaw": "toHsv(color)",
              "type": "method",
              "name": "toHsv",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSV <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, v ] = colors.toHsv(&#39;#663399&#39;);\nconsole.log(`H: ${h}, S: ${s}, V: ${v}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHsv(red, green, blue)",
              "type": "method",
              "name": "toHsv",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSV <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, v ] = colors.toHsv(102, 51, 153);\nconsole.log(`H: ${h}, S: ${s}, V: ${v}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toHsv"
        },
        {
          "textRaw": "[m] toHsva",
          "name": "[m]_tohsva",
          "methods": [
            {
              "textRaw": "toHsva(color)",
              "type": "method",
              "name": "toHsva",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSVA <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, v, a ] = colors.toHsva(&#39;#BF663399&#39;);\nconsole.log(`H: ${h}, S: ${s}, V: ${v}, A: ${a}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHsva(red, green, blue, alpha)",
              "type": "method",
              "name": "toHsva",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSVA <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, v, a ] = colors.toHsva(102, 51, 153, 191);\nconsole.log(`H: ${h}, S: ${s}, V: ${v}, A: ${a}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toHsva"
        },
        {
          "textRaw": "[m] toHsl",
          "name": "[m]_tohsl",
          "methods": [
            {
              "textRaw": "toHsl(color)",
              "type": "method",
              "name": "toHsl",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSL <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, l ] = colors.toHsl(&#39;#663399&#39;);\nconsole.log(`H: ${h}, S: ${s}, L: ${l}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHsl(red, green, blue)",
              "type": "method",
              "name": "toHsl",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSL <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, l ] = colors.toHsl(102, 51, 153);\nconsole.log(`H: ${h}, S: ${s}, L: ${l}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toHsl"
        },
        {
          "textRaw": "[m] toHsla",
          "name": "[m]_tohsla",
          "methods": [
            {
              "textRaw": "toHsla(color)",
              "type": "method",
              "name": "toHsla",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 2/2</code></strong></p>\n<ul>\n<li><strong>color</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSLA <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, l, a ] = colors.toHsla(&#39;#BF663399&#39;);\nconsole.log(`H: ${h}, S: ${s}, L: ${l}, A: ${a}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "toHsla(red, green, blue, alpha)",
              "type": "method",
              "name": "toHsla",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 1/2</code></strong></p>\n<ul>\n<li><strong>red</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - R (red)</li>\n<li><strong>green</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - G (green)</li>\n<li><strong>blue</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - B (blue)</li>\n<li><strong>alpha</strong> { <a href=\"dataTypes#colorcomponent\">ColorComponent</a> } - 颜色分量 - A (alpha)</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#colorcomponents\">ColorComponents</a> } - 颜色分量数组</li>\n</ul>\n<p>获取颜色参数的 HSLA <a href=\"dataTypes#colorcomponents\">颜色分量数组</a>.</p>\n<pre><code class=\"lang-js\">let [ h, s, l, a ] = colors.toHsla(102, 51, 153, 191);\nconsole.log(`H: ${h}, S: ${s}, L: ${l}, A: ${a}`);\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "red"
                    },
                    {
                      "name": "green"
                    },
                    {
                      "name": "blue"
                    },
                    {
                      "name": "alpha"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] toHsla"
        },
        {
          "textRaw": "[m] isSimilar",
          "name": "[m]_issimilar",
          "methods": [
            {
              "textRaw": "isSimilar(colorA, colorB, threshold?, algorithm?)",
              "type": "method",
              "name": "isSimilar",
              "desc": "<p><strong><code>[6.2.0]</code></strong> <strong><code>Overload [1-3]/4</code></strong></p>\n<ul>\n<li><strong>colorA</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>colorB</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>[threshold=4]</strong> { <a href=\"dataTypes#intrange\">IntRange[0..255]</a> } - <a href=\"glossaries#颜色匹配阈值\">颜色匹配阈值</a></li>\n<li><strong>[algorithm=&quot;diff&quot;]</strong> { <a href=\"dataTypes#colordetectionalgorithm\">ColorDetectionAlgorithm</a> } - 颜色检测算法</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#boolean\">boolean</a> } - 两个颜色是否相似</li>\n</ul>\n<p>判断两个颜色是否相似.</p>\n<p>不同阈值对结果的影响 (阈值越高, 条件越宽松, 阈值越低, 条件越严格):</p>\n<pre><code class=\"lang-js\">colors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 5); /* false, 阈值较小, 条件相对严格. */\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 10); /* true, 阈值增大, 条件趋于宽松. */\n</code></pre>\n<p>不同 <a href=\"dataTypes#colordetectionalgorithm\">颜色检测算法</a> 对结果的影响:</p>\n<pre><code class=\"lang-js\">colors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 9, &#39;rgb+&#39;); // false\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 9, &#39;diff&#39;); // true\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 9, &#39;hs&#39;); // true\n\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 8, &#39;rgb+&#39;); // false\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 8, &#39;diff&#39;); // false\ncolors.isSimilar(&#39;orange&#39;, &#39;dark-orange&#39;, 8, &#39;hs&#39;); // true\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorA"
                    },
                    {
                      "name": "colorB"
                    },
                    {
                      "name": "threshold?"
                    },
                    {
                      "name": "algorithm?"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "isSimilar(colorA, colorB, options)",
              "type": "method",
              "name": "isSimilar",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload 4/4</code></strong></p>\n<ul>\n<li><strong>colorA</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>colorB</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>options</strong> {{<ul>\n<li>[similarity≈0.9843]?: <a href=\"dataTypes#range\">Range[0..1]</a> - <a href=\"glossaries#相似度\">颜色匹配相似度</a></li>\n<li>[threshold=4]?: <a href=\"dataTypes#intrange\">IntRange[0..255]</a> - <a href=\"glossaries#颜色匹配阈值\">颜色匹配阈值</a></li>\n<li>[algorithm=&quot;diff&quot;]?: <a href=\"dataTypes#colordetectionalgorithm\">ColorDetectionAlgorithm</a> - 颜色检测算法</li>\n</ul>\n</li>\n<li>}} - 选项参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#boolean\">boolean</a> } - 两个颜色是否相似</li>\n</ul>\n<p>判断两个颜色是否相似.</p>\n<p>此方法将非必要参数集中于 <code>options</code> 对象中.</p>\n<pre><code class=\"lang-js\">colors.isSimilar(&#39;#010101&#39;, &#39;#020202&#39;, { similarity: 0.95 }); // true\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorA"
                    },
                    {
                      "name": "colorB"
                    },
                    {
                      "name": "options"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] isSimilar"
        },
        {
          "textRaw": "[m] isEqual",
          "name": "[m]_isequal",
          "methods": [
            {
              "textRaw": "isEqual(colorA, colorB, alphaMatters?)",
              "type": "method",
              "name": "isEqual",
              "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>Overload[1-2]/2</code></strong></p>\n<ul>\n<li><strong>colorA</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>colorB</strong> { <a href=\"dataTypes#colorhex\">ColorHex</a> | <a href=\"dataTypes#colorint\">ColorInt</a> | <a href=\"dataTypes#colorname\">ColorName</a> } - 颜色参数</li>\n<li><strong>[alphaMatters=false]</strong> { <a href=\"dataTypes#boolean\">boolean</a> } - 是否考虑 <code>A (alpha)</code> 分量</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#boolean\">boolean</a> } - 两个颜色是否相等</li>\n</ul>\n<p>判断两个颜色是否相等, 比较时由 <code>alphaMatters</code> 参数决定是否考虑 <code>A (alpha)</code> 分量:</p>\n<pre><code class=\"lang-js\">/* Hex 代码. */\ncolors.isEqual(&#39;#FF0000&#39;, &#39;#FF0000&#39;); // true\ncolors.isEqual(&#39;#FF0000&#39;, &#39;#F00&#39;); /* 同上, 三位数简写形式. */\n/* 颜色整数. */\ncolors.isEqual(-65536, 0xFF0000); // true\n/* 颜色名称. */\ncolors.isEqual(&#39;red&#39;, &#39;RED&#39;); /* true, 不区分大小写. */\ncolors.isEqual(&#39;orange&#39;, &#39;Orange&#39;); /* true, 不区分大小写. */\ncolors.isEqual(&#39;dark-gray&#39;, &#39;DARK_GRAY&#39;); /* true, 连字符与下划线均被支持. */\n/* 不同类型比较. */\ncolors.isEqual(&#39;red&#39;, &#39;#FF0000&#39;); // true\ncolors.isEqual(&#39;orange&#39;, &#39;#FFA500&#39;); // true\n/* A (alpha) 分量的不同情况. */\ncolors.isEqual(&#39;#A1FF0000&#39;, &#39;#A2FF0000&#39;); /* true, 默认忽略 A 分量. */\ncolors.isEqual(&#39;#A1FF0000&#39;, &#39;#A2FF0000&#39;, true); /* false, 需考虑 A 分量. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorA"
                    },
                    {
                      "name": "colorB"
                    },
                    {
                      "name": "alphaMatters?"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] isEqual"
        },
        {
          "textRaw": "[m] equals",
          "name": "[m]_equals",
          "methods": [
            {
              "textRaw": "equals(colorA, colorB)",
              "type": "method",
              "name": "equals",
              "desc": "<p><strong><code>DEPRECATED</code></strong></p>\n<ul>\n<li><strong>colorA</strong> { <a href=\"dataTypes#number\">number</a> | <a href=\"dataTypes#string\">string</a> } - 颜色参数</li>\n<li><strong>colorB</strong> { <a href=\"dataTypes#number\">number</a> | <a href=\"dataTypes#string\">string</a> } - 颜色参数</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#boolean\">boolean</a> } - 两个颜色是否相等 (忽略 <code>A (alpha)</code> 分量)</li>\n</ul>\n<p>判断两个颜色是否相等, 比较时忽略 <code>A (alpha)</code> 分量:</p>\n<pre><code class=\"lang-js\">/* Hex 代码. */\ncolors.equals(&#39;#FF0000&#39;, &#39;#FF0000&#39;); // true\n/* 颜色整数. */\ncolors.equals(-65536, 0xFF0000); // true\n/* 颜色名称. */\ncolors.equals(&#39;red&#39;, &#39;RED&#39;); // true\n/* 不同类型比较. */\ncolors.equals(&#39;red&#39;, &#39;#FF0000&#39;); // true\n/* A (alpha) 分量将被忽略. */\ncolors.equals(&#39;#A1FF0000&#39;, &#39;#A2FF0000&#39;); // true\n</code></pre>\n<p>但以下示例将全部抛出异常:</p>\n<pre><code class=\"lang-js\">colors.equals(&#39;orange&#39;, &#39;#FFA500&#39;); /* 抛出异常. */\ncolors.equals(&#39;dark-gray&#39;, &#39;#444&#39;); /* 抛出异常. */\ncolors.equals(&#39;#FF0000&#39;, &#39;#F00&#39;); /* 抛出异常. */\n</code></pre>\n<p>上述示例对于 <a href=\"#m-isequal\">colors.isEqual</a> 则全部返回 <code>true</code>.</p>\n<p>除非需要考虑多版本兼容, 否则建议始终使用 <code>colors.isEqual</code> 替代 <code>colors.equals</code>.</p>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "colorA"
                    },
                    {
                      "name": "colorB"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] equals"
        },
        {
          "textRaw": "[m] luminance",
          "name": "[m]_luminance",
          "methods": [
            {
              "textRaw": "luminance(color)",
              "type": "method",
              "name": "luminance",
              "signatures": [
                {
                  "params": [
                    {
                      "textRaw": "**color** { [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) } - 颜色参数 ",
                      "name": "**color**",
                      "type": " [ColorHex](dataTypes#colorhex) | [ColorInt](dataTypes#colorint) | [ColorName](dataTypes#colorname) ",
                      "desc": "颜色参数"
                    },
                    {
                      "textRaw": "<ins>**returns**</ins> { [Range[0..1]](dataTypes#range) } - 颜色亮度 ",
                      "name": "<ins>**returns**</ins>",
                      "type": " [Range[0..1]](dataTypes#range) ",
                      "desc": "颜色亮度"
                    }
                  ]
                },
                {
                  "params": [
                    {
                      "name": "color"
                    }
                  ]
                }
              ],
              "desc": "<p>获取颜色的 <a href=\"glossaries#luminance\">亮度 (Luminance)</a>, 取值范围 <code>[0..1]</code>.</p>\n<pre><code class=\"lang-js\">colors.luminance(colors.WHITE); // 1\ncolors.luminance(colors.BLACK); // 0\ncolors.luminance(colors.RED); // 0.2126\ncolors.luminance(colors.GREEN); // 0.7152\ncolors.luminance(colors.BLUE); // 0.0722\ncolors.luminance(colors.YELLOW); // 0.9278\n</code></pre>\n<blockquote>\n<p>参阅: <a href=\"https://www.w3.org/WAI/GL/wiki/Relative_luminance\">W3C Wiki</a></p>\n</blockquote>\n"
            }
          ],
          "type": "module",
          "displayName": "[m] luminance"
        },
        {
          "textRaw": "[p+] android",
          "name": "[p+]_android",
          "desc": "<p><a href=\"colorTable#Android-颜色列表\">Android 颜色列表</a> 对象.</p>\n",
          "type": "module",
          "displayName": "[p+] android"
        },
        {
          "textRaw": "[p+] css",
          "name": "[p+]_css",
          "desc": "<p><a href=\"colorTable#CSS-颜色列表\">Css 颜色列表</a> 对象.</p>\n",
          "type": "module",
          "displayName": "[p+] css"
        },
        {
          "textRaw": "[p+] web",
          "name": "[p+]_web",
          "desc": "<p><a href=\"colorTable#WEB-颜色列表\">Web 颜色列表</a> 对象.</p>\n",
          "type": "module",
          "displayName": "[p+] web"
        },
        {
          "textRaw": "[p+] material",
          "name": "[p+]_material",
          "desc": "<p><a href=\"colorTable#Material-颜色列表\">Material 颜色列表</a> 对象.</p>\n",
          "type": "module",
          "displayName": "[p+] material"
        },
        {
          "textRaw": "[p] BLACK",
          "name": "[p]_black",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #000000\">　</span> 黑 (<code>#000000</code> <code>rgb(0,0,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] BLACK"
        },
        {
          "textRaw": "[p] BLUE",
          "name": "[p]_blue",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #0000FF\">　</span> 蓝 (<code>#0000FF</code> <code>rgb(0,0,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] BLUE"
        },
        {
          "textRaw": "[p] CYAN",
          "name": "[p]_cyan",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #00FFFF\">　</span> 青 (<code>#00FFFF</code> <code>rgb(0,255,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] CYAN"
        },
        {
          "textRaw": "[p] AQUA",
          "name": "[p]_aqua",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #00FFFF\">　</span> 青 (<code>#00FFFF</code> <code>rgb(0,255,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] AQUA"
        },
        {
          "textRaw": "[p] DARK_GRAY",
          "name": "[p]_dark_gray",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #444444\">　</span> 暗灰 (<code>#444444</code> <code>rgb(68,68,68</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] DARK_GRAY"
        },
        {
          "textRaw": "[p] DARK_GREY",
          "name": "[p]_dark_grey",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #444444\">　</span> 暗灰 (<code>#444444</code> <code>rgb(68,68,68</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] DARK_GREY"
        },
        {
          "textRaw": "[p] DKGRAY",
          "name": "[p]_dkgray",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #444444\">　</span> 暗灰 (<code>#444444</code> <code>rgb(68,68,68</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] DKGRAY"
        },
        {
          "textRaw": "[p] GRAY",
          "name": "[p]_gray",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #888888\">　</span> 灰 (<code>#888888</code> <code>rgb(136,136,136</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] GRAY"
        },
        {
          "textRaw": "[p] GREY",
          "name": "[p]_grey",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #888888\">　</span> 灰 (<code>#888888</code> <code>rgb(136,136,136</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] GREY"
        },
        {
          "textRaw": "[p] GREEN",
          "name": "[p]_green",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #00FF00\">　</span> 绿 (<code>#00FF00</code> <code>rgb(0,255,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] GREEN"
        },
        {
          "textRaw": "[p] LIME",
          "name": "[p]_lime",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #00FF00\">　</span> 绿 (<code>#00FF00</code> <code>rgb(0,255,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] LIME"
        },
        {
          "textRaw": "[p] LIGHT_GRAY",
          "name": "[p]_light_gray",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #CCCCCC\">　</span> 亮灰 (<code>#CCCCCC</code> <code>rgb(204,204,204</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] LIGHT_GRAY"
        },
        {
          "textRaw": "[p] LIGHT_GREY",
          "name": "[p]_light_grey",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #CCCCCC\">　</span> 亮灰 (<code>#CCCCCC</code> <code>rgb(204,204,204</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] LIGHT_GREY"
        },
        {
          "textRaw": "[p] LTGRAY",
          "name": "[p]_ltgray",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #CCCCCC\">　</span> 亮灰 (<code>#CCCCCC</code> <code>rgb(204,204,204</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] LTGRAY"
        },
        {
          "textRaw": "[p] MAGENTA",
          "name": "[p]_magenta",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FF00FF\">　</span> 品红 / 洋红 (<code>#FF00FF</code> <code>rgb(255,0,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] MAGENTA"
        },
        {
          "textRaw": "[p] FUCHSIA",
          "name": "[p]_fuchsia",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FF00FF\">　</span> 品红 / 洋红 (<code>#FF00FF</code> <code>rgb(255,0,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] FUCHSIA"
        },
        {
          "textRaw": "[p] MAROON",
          "name": "[p]_maroon",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #800000\">　</span> 栗 (<code>#800000</code> <code>rgb(128,0,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] MAROON"
        },
        {
          "textRaw": "[p] NAVY",
          "name": "[p]_navy",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #000080\">　</span> 海军蓝 / 藏青 (<code>#000080</code> <code>rgb(0,0,128</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] NAVY"
        },
        {
          "textRaw": "[p] OLIVE",
          "name": "[p]_olive",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #808000\">　</span> 橄榄 (<code>#808000</code> <code>rgb(128,128,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] OLIVE"
        },
        {
          "textRaw": "[p] PURPLE",
          "name": "[p]_purple",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #800080\">　</span> 紫 (<code>#800080</code> <code>rgb(128,0,128</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] PURPLE"
        },
        {
          "textRaw": "[p] RED",
          "name": "[p]_red",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FF0000\">　</span> 红 (<code>#FF0000</code> <code>rgb(255,0,0</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] RED"
        },
        {
          "textRaw": "[p] SILVER",
          "name": "[p]_silver",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #C0C0C0\">　</span> 银 (<code>#C0C0C0</code> <code>rgb(192,192,192</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] SILVER"
        },
        {
          "textRaw": "[p] TEAL",
          "name": "[p]_teal",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #008080\">　</span> 鸭绿 / 凫绿 (<code>#008080</code> <code>rgb(0,128,128</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] TEAL"
        },
        {
          "textRaw": "[p] WHITE",
          "name": "[p]_white",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FFFFFF\">　</span> 白 (<code>#FFFFFF</code> <code>rgb(255,255,255</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] WHITE"
        },
        {
          "textRaw": "[p] YELLOW",
          "name": "[p]_yellow",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FFFF00\">　</span> 黄 (<code>#FFFF00</code> <code>rgb(255,255,0)</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] YELLOW"
        },
        {
          "textRaw": "[p] ORANGE",
          "name": "[p]_orange",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p><span style=\"background-color: #FFA500\">　</span> 橙 (<code>#FFA500</code> <code>rgb(255,165,0)</code>) 的颜色整数.</p>\n",
          "type": "module",
          "displayName": "[p] ORANGE"
        },
        {
          "textRaw": "[p] TRANSPARENT",
          "name": "[p]_transparent",
          "desc": "<p><strong><code>6.2.0</code></strong> <strong><code>CONSTANT</code></strong></p>\n<p>全透明 (<code>#00000000</code> <code>argb(0, 0, 0, 0)</code>) 的颜色整数.</p>\n<hr>\n",
          "type": "module",
          "displayName": "[p] TRANSPARENT"
        },
        {
          "textRaw": "融合颜色",
          "name": "融合颜色",
          "desc": "<p>为节约篇幅, 本章节仅列出了常用的部分融合颜色, 融合颜色属性直接挂载于 colors 对象上, 使用 <code>colors.Xxx</code> 的形式访问:</p>\n<pre><code class=\"lang-js\">colors.toHex(colors.BLACK); /* 黑色. */\ncolors.toHex(colors.ORANGE); /* 橙色. */\ncolors.toHex(colors.PANSY); /* 三色堇紫色. */\ncolors.toHex(colors.ALIZARIN_CRIMSON); /* 茜红色. */\ncolors.toHex(colors.PURPLE_300); /* 材料紫色 (300 号). */\n</code></pre>\n<p>更多融合颜色, 参阅 <a href=\"colorTable#融合颜色列表\">融合颜色列表</a> 小节.</p>\n",
          "type": "module",
          "displayName": "融合颜色"
        }
      ],
      "type": "module",
      "displayName": "颜色 (Color)"
    }
  ]
}