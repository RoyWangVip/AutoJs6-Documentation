{
  "source": "..\\api\\ocr.md",
  "modules": [
    {
      "textRaw": "光学字符识别 (OCR)",
      "name": "光学字符识别_(ocr)",
      "desc": "<p>ocr 模块用于识别图像中的文本.</p>\n<p>AutoJs6 的 OCR 特性是基于 <a href=\"https://developers.google.com/ml-kit?hl=zh-cn\">Google ML Kit</a> 的 <a href=\"https://developers.google.com/ml-kit/vision/text-recognition/android?hl=zh-cn\">文字识别 API</a> 实现的.</p>\n",
      "modules": [
        {
          "textRaw": "[@] ocr",
          "name": "[@]_ocr",
          "desc": "<p>ocr 可作为全局对象使用:</p>\n<pre><code class=\"lang-js\">typeof ocr; // &quot;function&quot;\ntypeof ocr.detect; // &quot;function&quot;\ntypeof ocr.recognizeText; // &quot;function&quot;\n</code></pre>\n",
          "methods": [
            {
              "textRaw": "ocr(img, options?)",
              "type": "method",
              "name": "ocr",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [1-2]/4</code></strong></p>\n<ul>\n<li><strong>img</strong> { <a href=\"imageWrapper\">ImageWrapper</a> } - 包装图像对象</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#string\">string</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别图像包含的所有文本, 返回文本数组.</p>\n<p><a href=\"#m-recognizetext\">ocr.recognizeText</a> 的别名方法.</p>\n<pre><code class=\"lang-js\">images.requestScreenCapture(); /* 申请屏幕截图权限. */\nlet img = images.captureScreen(); /* 截屏并获取包装图像对象. */\nocr(img).filter(text =&gt; text.includes(&#39;app&#39;)); /* 过滤结果. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "img"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "ocr(imgPath, options?)",
              "type": "method",
              "name": "ocr",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [3-4]/4</code></strong></p>\n<ul>\n<li><strong>imgPath</strong> { <a href=\"dataTypes#string\">string</a> } - 图像路径</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#string\">string</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别指定路径对应图像包含的所有文本, 返回文本数组.</p>\n<p>当指定路径无法解析为包装图像对象时, 将抛出 <code>TypeError</code> 异常.</p>\n<p><a href=\"#m-recognizetext\">ocr.recognizeText</a> 的别名方法.</p>\n<pre><code class=\"lang-js\">ocr(&#39;./picture.jpg&#39;); /* 获取本地图像文件中的所有文本. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "imgPath"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[@] ocr"
        },
        {
          "textRaw": "[m] recognizeText",
          "name": "[m]_recognizetext",
          "methods": [
            {
              "textRaw": "recognizeText(img, options?)",
              "type": "method",
              "name": "recognizeText",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [1-2]/4</code></strong></p>\n<ul>\n<li><strong>img</strong> { <a href=\"imageWrapper\">ImageWrapper</a> } - 包装图像对象</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#string\">string</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别图像包含的所有文本, 返回文本数组.</p>\n<p><code>ocr.recognizeText(img, options?)</code> 与 <code>ocr(img, options?)</code> 等价.</p>\n<pre><code class=\"lang-js\">images.requestScreenCapture(); /* 申请屏幕截图权限. */\nlet img = images.captureScreen(); /* 截屏并获取包装图像对象. */\nocr.recognizeText(img).filter(text =&gt; text.includes(&#39;app&#39;)); /* 过滤结果. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "img"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "recognizeText(imgPath, options?)",
              "type": "method",
              "name": "recognizeText",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [3-4]/4</code></strong></p>\n<ul>\n<li><strong>imgPath</strong> { <a href=\"dataTypes#string\">string</a> } - 图像路径</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#string\">string</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别指定路径对应图像包含的所有文本, 返回文本数组.</p>\n<p>当指定路径无法解析为包装图像对象时, 将抛出 <code>TypeError</code> 异常.</p>\n<p><code>ocr.recognizeText(imgPath, options?)</code> 与 <code>ocr(imgPath, options?)</code> 等价.</p>\n<pre><code class=\"lang-js\">ocr.recognizeText(&#39;./picture.jpg&#39;); /* 获取本地图像文件中的所有文本. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "imgPath"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] recognizeText"
        },
        {
          "textRaw": "[m] detect",
          "name": "[m]_detect",
          "methods": [
            {
              "textRaw": "detect(img, options?)",
              "type": "method",
              "name": "detect",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [1-2]/4</code></strong></p>\n<ul>\n<li><strong>img</strong> { <a href=\"imageWrapper\">ImageWrapper</a> } - 包装图像对象</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#ocrresult\">OcrResult</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别图像包含的所有文本, 返回 <a href=\"dataTypes#ocrresult\">OcrResult</a> 数组.</p>\n<pre><code class=\"lang-js\">images.requestScreenCapture(); /* 申请屏幕截图权限. */\nlet img = images.captureScreen(); /* 截屏并获取包装图像对象. */\nlet result = ocr.detect(img); /* 获取本地图像文件中的所有识别结果. */\nresult.filter(o =&gt; o.confidence &gt;= 0.8); /* 筛选置信度高于 0.8 的结果. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "img"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            },
            {
              "textRaw": "detect(imgPath, options?)",
              "type": "method",
              "name": "detect",
              "desc": "<p><strong><code>6.2.1</code></strong> <strong><code>Overload [3-4]/4</code></strong></p>\n<ul>\n<li><strong>imgPath</strong> { <a href=\"dataTypes#string\">string</a> } - 图像路径</li>\n<li><strong>[options]</strong> { <a href=\"dataTypes#ocroptions\">OcrOptions</a> } - OCR 识别选项</li>\n<li><ins><strong>returns</strong></ins> { <a href=\"dataTypes#ocrresult\">OcrResult</a><a href=\"dataTypes#array\">[]</a> }</li>\n</ul>\n<p>识别指定路径对应图像包含的所有文本, 返回 <a href=\"dataTypes#ocrresult\">OcrResult</a> 数组.</p>\n<p>当指定路径无法解析为包装图像对象时, 将抛出 <code>TypeError</code> 异常.</p>\n<pre><code class=\"lang-js\">let result = ocr.detect(&#39;./picture.jpg&#39;); /* 获取本地图像文件中的所有识别结果. */\nresult.filter(o =&gt; o.confidence &gt;= 0.8); /* 筛选置信度高于 0.8 的结果. */\n</code></pre>\n",
              "signatures": [
                {
                  "params": [
                    {
                      "name": "imgPath"
                    },
                    {
                      "name": "options?"
                    }
                  ]
                }
              ]
            }
          ],
          "type": "module",
          "displayName": "[m] detect"
        }
      ],
      "type": "module",
      "displayName": "光学字符识别 (OCR)"
    }
  ]
}